Usage:

  relk get <key> [-k <key>=<val>]... [-a <key>=<val>]... [-e <ext>]... (-n <ns>, -s <source>, -f, --allow-shell)
    Retrieve a key-value pair based on the specified key and constraints.

  relk get-attributes <key> [-k <key>=<val>]... (-n <ns>, -s <source>, -f)
    Retrieve the attributes of a key-value pair based on the specified key and constraints.

  relk set <key> <value> [-k <k>=<v>]... [-a <k>=<v>]... [-e <ext>]... (-n <ns>, -s <source>, -f)
    Set a key-value pair with optional constraints.

  relk set <key> -l <list> (--append|--prepend) [-k <k>=<v>]... [-a <k>=<v>]... [-e <ext>]... (-n <ns>, -s <source>, -f)
    Set a key using a list of values:    

    <list>:
      "[item-1],[item-2]...,[item-n]"  A list of elements to set or add to a list.
      --remove-first                   Removes the first element of the list.
      --remove-last                    Removes the last element of the list.
      --remove-all                     Removes all elements of the list.
      --remove:<value>                 Removes the element specified by value.
      --remove-at:<index>              Removes the element at the specified 1-based index.

  relk set <key> -t <template> [-k <k>=<v>]... [-a <k>=<v>]... [-e <ext>]... (-n <ns>, -s <source>, -f)
    Set a key using a template where references to other keys can be wrapped in braces:    

    <template>:
      "{key-name}"                     Retrieves the value based on the provided constraints.
      "{key-name:#<sed>}"              Retrieves the value and pipes it into `sed`.
      "{key-name:=<key | 'value'>}"    Retrieves the value or uses the default value.
     Requires --allow-shell flag:
      "{key-name:<command>}"           Retrieves the value and pipes it into a shell command.
      "{key-name:?<condition>}"        Retrieves the value and conditionally shows it.

      Examples:
        {key1}                         Retrieves the value for 'key1' based on the provided constraints.
        {key1:base64 -d}               Retrieves the value for 'key1' and decodes it from base64.
        {key1:#s/foo/bar/g}            Retrieves the value for 'key1' and replaces 'foo' with 'bar'.
        {key1:='default'}              Retrieves the value 'key1' but defaults to 'default' if it's empty.
        {key1:?key2 = 'something'}     Retrieves the value if the 'key2' value equals 'something'.
    
    <command>: [command] [...args]
      A shell command or executable and any required command-line parameters.
      
    <sed>: s/...
      A sed command, typically in the form "s/.../.../g"

    <condition>: [(][key] [= | != | > | <] [key | 'value'] [and | or] [...][)]
      One or more conditions used to evaluate whether to show a value. Conditions are ultimately a
      thin wrapper on top of the Bash double bracket [[ ... ]] syntax, where && and || are changed
      to `and` and `or`, and key references are resolved automatically. You can also reference the
      value being conditionally displayed in the condition expression using key name 'this'.

      Examples:
      another-key = 'some value'
      something >= 0 or something-else < 10
      key1 = 'yes' and key2 = 'yes'
      this != 'do-not-display'

  relk - [-k <constraint_key>=<constraint_value>]... (-n <namespace>, -f)
    Read stdin and process each line as a template with the provided context.

    Examples:
      cat ./config.yaml | relk - -k env=dev > ./config.dev.yaml

  relk get-context
    Displays the current context based on `./relk` files present in the current working directory.

  relk set-context (-n <namespace>, -f, -s <provider:path>)
    Sets the current context for the command.

  relk add-context (-n <namespace>, -f, -s <provider:path>)
    Adds to the current context for the command.

  relk remove-context
    Clears the context.

Options:

  -a <key>=<value>                     Sets an attribute key-value pair.
  -e <extension>                       Loads the specified extension.
  -f                                   Forces a key-value pair to be get or set.
  -k <c_key>=<c_value>                 Sets constraints for the key.
  -n <namespace>                       Specifies a namespace.
  -s <provider:path>                   Sets the source of the keystore.
  --debug                              Outputs debug messages.
  --append                             Appends the specified value to the list key.
  --prepend                            Prepends the specified value to the list key.
  --allow-shell                        Allows direct shell command execution.

Examples:

  relk set protocol 'https'
  relk set api-url -t '{protocol}://{host}/api'
  relk set host 'dev.myapi.com' -k env=dev
  relk get api-url -k env=dev

Extensions:

  timestamp                            Sets a timestamp attribute when creating key-value pairs.
  ttl                                  Adds time to live (TTL) enforcement when getting keys-value pairs.

For more information, see the documentation at https://github.com/stevenmhunt/relk
